<?php
/**
 * SyncingProgressType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Semux API
 *
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Semux\Client\Model;

use \ArrayAccess;
use \Semux\Client\ObjectSerializer;

/**
 * SyncingProgressType Class Doc Comment
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SyncingProgressType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SyncingProgressType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'syncing' => 'bool',
        'startingHeight' => 'string',
        'currentHeight' => 'string',
        'targetHeight' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'syncing' => null,
        'startingHeight' => 'int64',
        'currentHeight' => 'int64',
        'targetHeight' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'syncing' => 'syncing',
        'startingHeight' => 'startingHeight',
        'currentHeight' => 'currentHeight',
        'targetHeight' => 'targetHeight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'syncing' => 'setSyncing',
        'startingHeight' => 'setStartingHeight',
        'currentHeight' => 'setCurrentHeight',
        'targetHeight' => 'setTargetHeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'syncing' => 'getSyncing',
        'startingHeight' => 'getStartingHeight',
        'currentHeight' => 'getCurrentHeight',
        'targetHeight' => 'getTargetHeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['syncing'] = isset($data['syncing']) ? $data['syncing'] : null;
        $this->container['startingHeight'] = isset($data['startingHeight']) ? $data['startingHeight'] : null;
        $this->container['currentHeight'] = isset($data['currentHeight']) ? $data['currentHeight'] : null;
        $this->container['targetHeight'] = isset($data['targetHeight']) ? $data['targetHeight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['syncing'] === null) {
            $invalidProperties[] = "'syncing' can't be null";
        }
        if (!is_null($this->container['startingHeight']) && !preg_match("/^\\d+$/", $this->container['startingHeight'])) {
            $invalidProperties[] = "invalid value for 'startingHeight', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['currentHeight']) && !preg_match("/^\\d+$/", $this->container['currentHeight'])) {
            $invalidProperties[] = "invalid value for 'currentHeight', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['targetHeight']) && !preg_match("/^\\d+$/", $this->container['targetHeight'])) {
            $invalidProperties[] = "invalid value for 'targetHeight', must be conform to the pattern /^\\d+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['syncing'] === null) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['startingHeight'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['currentHeight'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['targetHeight'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets syncing
     *
     * @return bool
     */
    public function getSyncing()
    {
        return $this->container['syncing'];
    }

    /**
     * Sets syncing
     *
     * @param bool $syncing Whether the node is syncing
     *
     * @return $this
     */
    public function setSyncing($syncing)
    {
        $this->container['syncing'] = $syncing;

        return $this;
    }

    /**
     * Gets startingHeight
     *
     * @return string
     */
    public function getStartingHeight()
    {
        return $this->container['startingHeight'];
    }

    /**
     * Sets startingHeight
     *
     * @param string $startingHeight The block height at which the sync started
     *
     * @return $this
     */
    public function setStartingHeight($startingHeight)
    {

        if (!is_null($startingHeight) && (!preg_match("/^\\d+$/", $startingHeight))) {
            throw new \InvalidArgumentException("invalid value for $startingHeight when calling SyncingProgressType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['startingHeight'] = $startingHeight;

        return $this;
    }

    /**
     * Gets currentHeight
     *
     * @return string
     */
    public function getCurrentHeight()
    {
        return $this->container['currentHeight'];
    }

    /**
     * Sets currentHeight
     *
     * @param string $currentHeight The current block height
     *
     * @return $this
     */
    public function setCurrentHeight($currentHeight)
    {

        if (!is_null($currentHeight) && (!preg_match("/^\\d+$/", $currentHeight))) {
            throw new \InvalidArgumentException("invalid value for $currentHeight when calling SyncingProgressType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['currentHeight'] = $currentHeight;

        return $this;
    }

    /**
     * Gets targetHeight
     *
     * @return string
     */
    public function getTargetHeight()
    {
        return $this->container['targetHeight'];
    }

    /**
     * Sets targetHeight
     *
     * @param string $targetHeight The target block height
     *
     * @return $this
     */
    public function setTargetHeight($targetHeight)
    {

        if (!is_null($targetHeight) && (!preg_match("/^\\d+$/", $targetHeight))) {
            throw new \InvalidArgumentException("invalid value for $targetHeight when calling SyncingProgressType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['targetHeight'] = $targetHeight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


