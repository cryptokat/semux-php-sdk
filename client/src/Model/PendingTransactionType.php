<?php
/**
 * PendingTransactionType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Semux API
 *
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Semux\Client\Model;

use \ArrayAccess;
use \Semux\Client\ObjectSerializer;

/**
 * PendingTransactionType Class Doc Comment
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PendingTransactionType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PendingTransactionType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hash' => 'string',
        'type' => 'string',
        'from' => 'string',
        'to' => 'string',
        'value' => 'string',
        'fee' => 'string',
        'nonce' => 'string',
        'timestamp' => 'string',
        'data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hash' => null,
        'type' => null,
        'from' => null,
        'to' => null,
        'value' => 'int64',
        'fee' => 'int64',
        'nonce' => 'int64',
        'timestamp' => 'int64',
        'data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hash' => 'hash',
        'type' => 'type',
        'from' => 'from',
        'to' => 'to',
        'value' => 'value',
        'fee' => 'fee',
        'nonce' => 'nonce',
        'timestamp' => 'timestamp',
        'data' => 'data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hash' => 'setHash',
        'type' => 'setType',
        'from' => 'setFrom',
        'to' => 'setTo',
        'value' => 'setValue',
        'fee' => 'setFee',
        'nonce' => 'setNonce',
        'timestamp' => 'setTimestamp',
        'data' => 'setData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hash' => 'getHash',
        'type' => 'getType',
        'from' => 'getFrom',
        'to' => 'getTo',
        'value' => 'getValue',
        'fee' => 'getFee',
        'nonce' => 'getNonce',
        'timestamp' => 'getTimestamp',
        'data' => 'getData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_COINBASE = 'COINBASE';
    const TYPE_TRANSFER = 'TRANSFER';
    const TYPE_DELEGATE = 'DELEGATE';
    const TYPE_VOTE = 'VOTE';
    const TYPE_UNVOTE = 'UNVOTE';
    const TYPE_CREATE = 'CREATE';
    const TYPE_CALL = 'CALL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_COINBASE,
            self::TYPE_TRANSFER,
            self::TYPE_DELEGATE,
            self::TYPE_VOTE,
            self::TYPE_UNVOTE,
            self::TYPE_CREATE,
            self::TYPE_CALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['nonce'] = isset($data['nonce']) ? $data['nonce'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['hash']) && !preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['hash'])) {
            $invalidProperties[] = "invalid value for 'hash', must be conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['from']) && !preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $this->container['from'])) {
            $invalidProperties[] = "invalid value for 'from', must be conform to the pattern /^(0x)?[0-9a-fA-F]{40}$/.";
        }

        if (!is_null($this->container['to']) && !preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $this->container['to'])) {
            $invalidProperties[] = "invalid value for 'to', must be conform to the pattern /^(0x)?[0-9a-fA-F]{40}$/.";
        }

        if (!is_null($this->container['value']) && !preg_match("/^\\d+$/", $this->container['value'])) {
            $invalidProperties[] = "invalid value for 'value', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['fee']) && !preg_match("/^\\d+$/", $this->container['fee'])) {
            $invalidProperties[] = "invalid value for 'fee', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['nonce']) && !preg_match("/^\\d+$/", $this->container['nonce'])) {
            $invalidProperties[] = "invalid value for 'nonce', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['timestamp']) && !preg_match("/^\\d+$/", $this->container['timestamp'])) {
            $invalidProperties[] = "invalid value for 'timestamp', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['data']) && !preg_match("/^(0x)?[0-9a-fA-F]*$/", $this->container['data'])) {
            $invalidProperties[] = "invalid value for 'data', must be conform to the pattern /^(0x)?[0-9a-fA-F]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['hash'])) {
            return false;
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        if (!preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $this->container['from'])) {
            return false;
        }
        if (!preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $this->container['to'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['value'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['fee'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['nonce'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['timestamp'])) {
            return false;
        }
        if (!preg_match("/^(0x)?[0-9a-fA-F]*$/", $this->container['data'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash hash
     *
     * @return $this
     */
    public function setHash($hash)
    {

        if (!is_null($hash) && (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $hash))) {
            throw new \InvalidArgumentException("invalid value for $hash when calling PendingTransactionType., must conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.");
        }

        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from
     *
     * @return $this
     */
    public function setFrom($from)
    {

        if (!is_null($from) && (!preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $from))) {
            throw new \InvalidArgumentException("invalid value for $from when calling PendingTransactionType., must conform to the pattern /^(0x)?[0-9a-fA-F]{40}$/.");
        }

        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to
     *
     * @return $this
     */
    public function setTo($to)
    {

        if (!is_null($to) && (!preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $to))) {
            throw new \InvalidArgumentException("invalid value for $to when calling PendingTransactionType., must conform to the pattern /^(0x)?[0-9a-fA-F]{40}$/.");
        }

        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {

        if (!is_null($value) && (!preg_match("/^\\d+$/", $value))) {
            throw new \InvalidArgumentException("invalid value for $value when calling PendingTransactionType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return string
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param string $fee fee
     *
     * @return $this
     */
    public function setFee($fee)
    {

        if (!is_null($fee) && (!preg_match("/^\\d+$/", $fee))) {
            throw new \InvalidArgumentException("invalid value for $fee when calling PendingTransactionType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string $nonce nonce
     *
     * @return $this
     */
    public function setNonce($nonce)
    {

        if (!is_null($nonce) && (!preg_match("/^\\d+$/", $nonce))) {
            throw new \InvalidArgumentException("invalid value for $nonce when calling PendingTransactionType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {

        if (!is_null($timestamp) && (!preg_match("/^\\d+$/", $timestamp))) {
            throw new \InvalidArgumentException("invalid value for $timestamp when calling PendingTransactionType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data data
     *
     * @return $this
     */
    public function setData($data)
    {

        if (!is_null($data) && (!preg_match("/^(0x)?[0-9a-fA-F]*$/", $data))) {
            throw new \InvalidArgumentException("invalid value for $data when calling PendingTransactionType., must conform to the pattern /^(0x)?[0-9a-fA-F]*$/.");
        }

        $this->container['data'] = $data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


