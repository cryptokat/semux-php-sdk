<?php
/**
 * BlockType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Semux API
 *
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Semux\Client\Model;

use \ArrayAccess;
use \Semux\Client\ObjectSerializer;

/**
 * BlockType Class Doc Comment
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BlockType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BlockType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hash' => 'string',
        'number' => 'string',
        'view' => 'int',
        'coinbase' => 'string',
        'parentHash' => 'string',
        'timestamp' => 'string',
        'date' => 'string',
        'transactionsRoot' => 'string',
        'resultsRoot' => 'string',
        'stateRoot' => 'string',
        'data' => 'string',
        'transactions' => '\Semux\Client\Model\TransactionType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hash' => null,
        'number' => 'int64',
        'view' => 'int32',
        'coinbase' => null,
        'parentHash' => null,
        'timestamp' => 'int64',
        'date' => null,
        'transactionsRoot' => null,
        'resultsRoot' => null,
        'stateRoot' => null,
        'data' => null,
        'transactions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hash' => 'hash',
        'number' => 'number',
        'view' => 'view',
        'coinbase' => 'coinbase',
        'parentHash' => 'parentHash',
        'timestamp' => 'timestamp',
        'date' => 'date',
        'transactionsRoot' => 'transactionsRoot',
        'resultsRoot' => 'resultsRoot',
        'stateRoot' => 'stateRoot',
        'data' => 'data',
        'transactions' => 'transactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hash' => 'setHash',
        'number' => 'setNumber',
        'view' => 'setView',
        'coinbase' => 'setCoinbase',
        'parentHash' => 'setParentHash',
        'timestamp' => 'setTimestamp',
        'date' => 'setDate',
        'transactionsRoot' => 'setTransactionsRoot',
        'resultsRoot' => 'setResultsRoot',
        'stateRoot' => 'setStateRoot',
        'data' => 'setData',
        'transactions' => 'setTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hash' => 'getHash',
        'number' => 'getNumber',
        'view' => 'getView',
        'coinbase' => 'getCoinbase',
        'parentHash' => 'getParentHash',
        'timestamp' => 'getTimestamp',
        'date' => 'getDate',
        'transactionsRoot' => 'getTransactionsRoot',
        'resultsRoot' => 'getResultsRoot',
        'stateRoot' => 'getStateRoot',
        'data' => 'getData',
        'transactions' => 'getTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['view'] = isset($data['view']) ? $data['view'] : null;
        $this->container['coinbase'] = isset($data['coinbase']) ? $data['coinbase'] : null;
        $this->container['parentHash'] = isset($data['parentHash']) ? $data['parentHash'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['transactionsRoot'] = isset($data['transactionsRoot']) ? $data['transactionsRoot'] : null;
        $this->container['resultsRoot'] = isset($data['resultsRoot']) ? $data['resultsRoot'] : null;
        $this->container['stateRoot'] = isset($data['stateRoot']) ? $data['stateRoot'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['hash']) && !preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['hash'])) {
            $invalidProperties[] = "invalid value for 'hash', must be conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.";
        }

        if (!is_null($this->container['number']) && !preg_match("/^\\d+$/", $this->container['number'])) {
            $invalidProperties[] = "invalid value for 'number', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['coinbase']) && !preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $this->container['coinbase'])) {
            $invalidProperties[] = "invalid value for 'coinbase', must be conform to the pattern /^(0x)?[0-9a-fA-F]{40}$/.";
        }

        if (!is_null($this->container['parentHash']) && !preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['parentHash'])) {
            $invalidProperties[] = "invalid value for 'parentHash', must be conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.";
        }

        if (!is_null($this->container['timestamp']) && !preg_match("/^\\d+$/", $this->container['timestamp'])) {
            $invalidProperties[] = "invalid value for 'timestamp', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['date']) && !preg_match("/^\\d{4}-\\d{2}-\\d{2} \\d{2}-\\d{2}-\\d{2}$/", $this->container['date'])) {
            $invalidProperties[] = "invalid value for 'date', must be conform to the pattern /^\\d{4}-\\d{2}-\\d{2} \\d{2}-\\d{2}-\\d{2}$/.";
        }

        if (!is_null($this->container['transactionsRoot']) && !preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['transactionsRoot'])) {
            $invalidProperties[] = "invalid value for 'transactionsRoot', must be conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.";
        }

        if (!is_null($this->container['resultsRoot']) && !preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['resultsRoot'])) {
            $invalidProperties[] = "invalid value for 'resultsRoot', must be conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.";
        }

        if (!is_null($this->container['stateRoot']) && !preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['stateRoot'])) {
            $invalidProperties[] = "invalid value for 'stateRoot', must be conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.";
        }

        if (!is_null($this->container['data']) && !preg_match("/^(0x)?[0-9a-fA-F]*$/", $this->container['data'])) {
            $invalidProperties[] = "invalid value for 'data', must be conform to the pattern /^(0x)?[0-9a-fA-F]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['hash'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['number'])) {
            return false;
        }
        if (!preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $this->container['coinbase'])) {
            return false;
        }
        if (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['parentHash'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['timestamp'])) {
            return false;
        }
        if (!preg_match("/^\\d{4}-\\d{2}-\\d{2} \\d{2}-\\d{2}-\\d{2}$/", $this->container['date'])) {
            return false;
        }
        if (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['transactionsRoot'])) {
            return false;
        }
        if (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['resultsRoot'])) {
            return false;
        }
        if (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $this->container['stateRoot'])) {
            return false;
        }
        if (!preg_match("/^(0x)?[0-9a-fA-F]*$/", $this->container['data'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash hash
     *
     * @return $this
     */
    public function setHash($hash)
    {

        if (!is_null($hash) && (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $hash))) {
            throw new \InvalidArgumentException("invalid value for $hash when calling BlockType., must conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.");
        }

        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {

        if (!is_null($number) && (!preg_match("/^\\d+$/", $number))) {
            throw new \InvalidArgumentException("invalid value for $number when calling BlockType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets view
     *
     * @return int
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param int $view view
     *
     * @return $this
     */
    public function setView($view)
    {
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets coinbase
     *
     * @return string
     */
    public function getCoinbase()
    {
        return $this->container['coinbase'];
    }

    /**
     * Sets coinbase
     *
     * @param string $coinbase coinbase
     *
     * @return $this
     */
    public function setCoinbase($coinbase)
    {

        if (!is_null($coinbase) && (!preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $coinbase))) {
            throw new \InvalidArgumentException("invalid value for $coinbase when calling BlockType., must conform to the pattern /^(0x)?[0-9a-fA-F]{40}$/.");
        }

        $this->container['coinbase'] = $coinbase;

        return $this;
    }

    /**
     * Gets parentHash
     *
     * @return string
     */
    public function getParentHash()
    {
        return $this->container['parentHash'];
    }

    /**
     * Sets parentHash
     *
     * @param string $parentHash parentHash
     *
     * @return $this
     */
    public function setParentHash($parentHash)
    {

        if (!is_null($parentHash) && (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $parentHash))) {
            throw new \InvalidArgumentException("invalid value for $parentHash when calling BlockType., must conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.");
        }

        $this->container['parentHash'] = $parentHash;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {

        if (!is_null($timestamp) && (!preg_match("/^\\d+$/", $timestamp))) {
            throw new \InvalidArgumentException("invalid value for $timestamp when calling BlockType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {

        if (!is_null($date) && (!preg_match("/^\\d{4}-\\d{2}-\\d{2} \\d{2}-\\d{2}-\\d{2}$/", $date))) {
            throw new \InvalidArgumentException("invalid value for $date when calling BlockType., must conform to the pattern /^\\d{4}-\\d{2}-\\d{2} \\d{2}-\\d{2}-\\d{2}$/.");
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets transactionsRoot
     *
     * @return string
     */
    public function getTransactionsRoot()
    {
        return $this->container['transactionsRoot'];
    }

    /**
     * Sets transactionsRoot
     *
     * @param string $transactionsRoot transactionsRoot
     *
     * @return $this
     */
    public function setTransactionsRoot($transactionsRoot)
    {

        if (!is_null($transactionsRoot) && (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $transactionsRoot))) {
            throw new \InvalidArgumentException("invalid value for $transactionsRoot when calling BlockType., must conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.");
        }

        $this->container['transactionsRoot'] = $transactionsRoot;

        return $this;
    }

    /**
     * Gets resultsRoot
     *
     * @return string
     */
    public function getResultsRoot()
    {
        return $this->container['resultsRoot'];
    }

    /**
     * Sets resultsRoot
     *
     * @param string $resultsRoot resultsRoot
     *
     * @return $this
     */
    public function setResultsRoot($resultsRoot)
    {

        if (!is_null($resultsRoot) && (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $resultsRoot))) {
            throw new \InvalidArgumentException("invalid value for $resultsRoot when calling BlockType., must conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.");
        }

        $this->container['resultsRoot'] = $resultsRoot;

        return $this;
    }

    /**
     * Gets stateRoot
     *
     * @return string
     */
    public function getStateRoot()
    {
        return $this->container['stateRoot'];
    }

    /**
     * Sets stateRoot
     *
     * @param string $stateRoot stateRoot
     *
     * @return $this
     */
    public function setStateRoot($stateRoot)
    {

        if (!is_null($stateRoot) && (!preg_match("/^(0x)?[0-9a-fA-F]{64}$/", $stateRoot))) {
            throw new \InvalidArgumentException("invalid value for $stateRoot when calling BlockType., must conform to the pattern /^(0x)?[0-9a-fA-F]{64}$/.");
        }

        $this->container['stateRoot'] = $stateRoot;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data data
     *
     * @return $this
     */
    public function setData($data)
    {

        if (!is_null($data) && (!preg_match("/^(0x)?[0-9a-fA-F]*$/", $data))) {
            throw new \InvalidArgumentException("invalid value for $data when calling BlockType., must conform to the pattern /^(0x)?[0-9a-fA-F]*$/.");
        }

        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Semux\Client\Model\TransactionType[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Semux\Client\Model\TransactionType[] $transactions transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


