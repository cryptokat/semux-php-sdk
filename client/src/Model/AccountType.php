<?php
/**
 * AccountType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Semux API
 *
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Semux\Client\Model;

use \ArrayAccess;
use \Semux\Client\ObjectSerializer;

/**
 * AccountType Class Doc Comment
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
        'available' => 'string',
        'locked' => 'string',
        'nonce' => 'string',
        'transactionCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'available' => 'int64',
        'locked' => 'int64',
        'nonce' => 'int64',
        'transactionCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'available' => 'available',
        'locked' => 'locked',
        'nonce' => 'nonce',
        'transactionCount' => 'transactionCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'available' => 'setAvailable',
        'locked' => 'setLocked',
        'nonce' => 'setNonce',
        'transactionCount' => 'setTransactionCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'available' => 'getAvailable',
        'locked' => 'getLocked',
        'nonce' => 'getNonce',
        'transactionCount' => 'getTransactionCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['nonce'] = isset($data['nonce']) ? $data['nonce'] : null;
        $this->container['transactionCount'] = isset($data['transactionCount']) ? $data['transactionCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['available']) && !preg_match("/^\\d+$/", $this->container['available'])) {
            $invalidProperties[] = "invalid value for 'available', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['locked']) && !preg_match("/^\\d+$/", $this->container['locked'])) {
            $invalidProperties[] = "invalid value for 'locked', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['nonce']) && !preg_match("/^\\d+$/", $this->container['nonce'])) {
            $invalidProperties[] = "invalid value for 'nonce', must be conform to the pattern /^\\d+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (!preg_match("/^\\d+$/", $this->container['available'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['locked'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['nonce'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets available
     *
     * @return string
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param string $available available
     *
     * @return $this
     */
    public function setAvailable($available)
    {

        if (!is_null($available) && (!preg_match("/^\\d+$/", $available))) {
            throw new \InvalidArgumentException("invalid value for $available when calling AccountType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return string
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param string $locked locked
     *
     * @return $this
     */
    public function setLocked($locked)
    {

        if (!is_null($locked) && (!preg_match("/^\\d+$/", $locked))) {
            throw new \InvalidArgumentException("invalid value for $locked when calling AccountType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string
     */
    public function getNonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string $nonce nonce
     *
     * @return $this
     */
    public function setNonce($nonce)
    {

        if (!is_null($nonce) && (!preg_match("/^\\d+$/", $nonce))) {
            throw new \InvalidArgumentException("invalid value for $nonce when calling AccountType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets transactionCount
     *
     * @return int
     */
    public function getTransactionCount()
    {
        return $this->container['transactionCount'];
    }

    /**
     * Sets transactionCount
     *
     * @param int $transactionCount transactionCount
     *
     * @return $this
     */
    public function setTransactionCount($transactionCount)
    {
        $this->container['transactionCount'] = $transactionCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


