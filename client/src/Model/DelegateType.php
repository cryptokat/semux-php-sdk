<?php
/**
 * DelegateType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Semux API
 *
 * Semux is an experimental high-performance blockchain platform that powers decentralized application.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Semux\Client\Model;

use \ArrayAccess;
use \Semux\Client\ObjectSerializer;

/**
 * DelegateType Class Doc Comment
 *
 * @category Class
 * @package  Semux\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DelegateType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DelegateType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
        'name' => 'string',
        'registeredAt' => 'string',
        'votes' => 'string',
        'blocksForged' => 'string',
        'turnsHit' => 'string',
        'turnsMissed' => 'string',
        'validator' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'name' => null,
        'registeredAt' => 'int64',
        'votes' => 'int64',
        'blocksForged' => 'int64',
        'turnsHit' => 'int64',
        'turnsMissed' => 'int64',
        'validator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'name' => 'name',
        'registeredAt' => 'registeredAt',
        'votes' => 'votes',
        'blocksForged' => 'blocksForged',
        'turnsHit' => 'turnsHit',
        'turnsMissed' => 'turnsMissed',
        'validator' => 'validator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'name' => 'setName',
        'registeredAt' => 'setRegisteredAt',
        'votes' => 'setVotes',
        'blocksForged' => 'setBlocksForged',
        'turnsHit' => 'setTurnsHit',
        'turnsMissed' => 'setTurnsMissed',
        'validator' => 'setValidator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'name' => 'getName',
        'registeredAt' => 'getRegisteredAt',
        'votes' => 'getVotes',
        'blocksForged' => 'getBlocksForged',
        'turnsHit' => 'getTurnsHit',
        'turnsMissed' => 'getTurnsMissed',
        'validator' => 'getValidator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['registeredAt'] = isset($data['registeredAt']) ? $data['registeredAt'] : null;
        $this->container['votes'] = isset($data['votes']) ? $data['votes'] : null;
        $this->container['blocksForged'] = isset($data['blocksForged']) ? $data['blocksForged'] : null;
        $this->container['turnsHit'] = isset($data['turnsHit']) ? $data['turnsHit'] : null;
        $this->container['turnsMissed'] = isset($data['turnsMissed']) ? $data['turnsMissed'] : null;
        $this->container['validator'] = isset($data['validator']) ? $data['validator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['address']) && !preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $this->container['address'])) {
            $invalidProperties[] = "invalid value for 'address', must be conform to the pattern /^(0x)?[0-9a-fA-F]{40}$/.";
        }

        if (!is_null($this->container['registeredAt']) && !preg_match("/^\\d+$/", $this->container['registeredAt'])) {
            $invalidProperties[] = "invalid value for 'registeredAt', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['votes']) && !preg_match("/^\\d+$/", $this->container['votes'])) {
            $invalidProperties[] = "invalid value for 'votes', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['blocksForged']) && !preg_match("/^\\d+$/", $this->container['blocksForged'])) {
            $invalidProperties[] = "invalid value for 'blocksForged', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['turnsHit']) && !preg_match("/^\\d+$/", $this->container['turnsHit'])) {
            $invalidProperties[] = "invalid value for 'turnsHit', must be conform to the pattern /^\\d+$/.";
        }

        if (!is_null($this->container['turnsMissed']) && !preg_match("/^\\d+$/", $this->container['turnsMissed'])) {
            $invalidProperties[] = "invalid value for 'turnsMissed', must be conform to the pattern /^\\d+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (!preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $this->container['address'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['registeredAt'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['votes'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['blocksForged'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['turnsHit'])) {
            return false;
        }
        if (!preg_match("/^\\d+$/", $this->container['turnsMissed'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Delegate SEM address
     *
     * @return $this
     */
    public function setAddress($address)
    {

        if (!is_null($address) && (!preg_match("/^(0x)?[0-9a-fA-F]{40}$/", $address))) {
            throw new \InvalidArgumentException("invalid value for $address when calling DelegateType., must conform to the pattern /^(0x)?[0-9a-fA-F]{40}$/.");
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Delegate name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets registeredAt
     *
     * @return string
     */
    public function getRegisteredAt()
    {
        return $this->container['registeredAt'];
    }

    /**
     * Sets registeredAt
     *
     * @param string $registeredAt Delegate registration block number
     *
     * @return $this
     */
    public function setRegisteredAt($registeredAt)
    {

        if (!is_null($registeredAt) && (!preg_match("/^\\d+$/", $registeredAt))) {
            throw new \InvalidArgumentException("invalid value for $registeredAt when calling DelegateType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['registeredAt'] = $registeredAt;

        return $this;
    }

    /**
     * Gets votes
     *
     * @return string
     */
    public function getVotes()
    {
        return $this->container['votes'];
    }

    /**
     * Sets votes
     *
     * @param string $votes Total votes of the delegate
     *
     * @return $this
     */
    public function setVotes($votes)
    {

        if (!is_null($votes) && (!preg_match("/^\\d+$/", $votes))) {
            throw new \InvalidArgumentException("invalid value for $votes when calling DelegateType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['votes'] = $votes;

        return $this;
    }

    /**
     * Gets blocksForged
     *
     * @return string
     */
    public function getBlocksForged()
    {
        return $this->container['blocksForged'];
    }

    /**
     * Sets blocksForged
     *
     * @param string $blocksForged Total forged blocks including primary rounds & backup rounds
     *
     * @return $this
     */
    public function setBlocksForged($blocksForged)
    {

        if (!is_null($blocksForged) && (!preg_match("/^\\d+$/", $blocksForged))) {
            throw new \InvalidArgumentException("invalid value for $blocksForged when calling DelegateType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['blocksForged'] = $blocksForged;

        return $this;
    }

    /**
     * Gets turnsHit
     *
     * @return string
     */
    public function getTurnsHit()
    {
        return $this->container['turnsHit'];
    }

    /**
     * Sets turnsHit
     *
     * @param string $turnsHit Forged blocks when the delegate is a primary validator
     *
     * @return $this
     */
    public function setTurnsHit($turnsHit)
    {

        if (!is_null($turnsHit) && (!preg_match("/^\\d+$/", $turnsHit))) {
            throw new \InvalidArgumentException("invalid value for $turnsHit when calling DelegateType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['turnsHit'] = $turnsHit;

        return $this;
    }

    /**
     * Gets turnsMissed
     *
     * @return string
     */
    public function getTurnsMissed()
    {
        return $this->container['turnsMissed'];
    }

    /**
     * Sets turnsMissed
     *
     * @param string $turnsMissed Missed blocks when the delegate is a primary validator
     *
     * @return $this
     */
    public function setTurnsMissed($turnsMissed)
    {

        if (!is_null($turnsMissed) && (!preg_match("/^\\d+$/", $turnsMissed))) {
            throw new \InvalidArgumentException("invalid value for $turnsMissed when calling DelegateType., must conform to the pattern /^\\d+$/.");
        }

        $this->container['turnsMissed'] = $turnsMissed;

        return $this;
    }

    /**
     * Gets validator
     *
     * @return bool
     */
    public function getValidator()
    {
        return $this->container['validator'];
    }

    /**
     * Sets validator
     *
     * @param bool $validator Whether the delegate is currently a validator
     *
     * @return $this
     */
    public function setValidator($validator)
    {
        $this->container['validator'] = $validator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


